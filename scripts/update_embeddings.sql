-- This SQL script is intended to be run after the Python script `generate_embeddings.py`
-- It assumes that the `vector_embedding` columns in the respective tables
-- are of type `VECTOR` and have been populated by the Python script.

-- Example of how to update a single record's embedding manually (for testing/debugging)
-- This is generally handled by the Python script.

-- UPDATE health_specialists
-- SET vector_embedding = '[your_new_embedding_array_here]'::vector
-- WHERE id = 'some-specialist-id';

-- UPDATE schools
-- SET vector_embedding = '[your_new_embedding_array_here]'::vector
-- WHERE id = 'some-school-id';

-- UPDATE outdoor_clubs
-- SET vector_embedding = '[your_new_embedding_array_here]'::vector
-- WHERE id = 'some-club-id';

-- To ensure the vector search function works correctly,
-- make sure the `match_documents` function is created in your Supabase database.
-- This function is typically part of your initial Supabase setup or a migration.

-- Example `match_documents` function (if not already present):
-- CREATE OR REPLACE FUNCTION match_documents(
--   query_embedding vector(1536),
--   match_threshold float,
--   match_count int
-- )
-- RETURNS TABLE(id uuid, content text, similarity float)
-- LANGUAGE plpgsql
-- AS $$
-- #variable_conflict use_column
-- BEGIN
--   RETURN QUERY
--   SELECT
--     id,
--     COALESCE(
--       name || ' ' || specialty || ' ' || location || ' ' || array_to_string(services, ' ') || ' ' || bio,
--       name || ' ' || location || ' ' || array_to_string(programs, ' ') || ' ' || description,
--       name || ' ' || location || ' ' || array_to_string(activities, ' ') || ' ' || description
--     ) AS content,
--     1 - (vector_embedding <=> query_embedding) AS similarity
--   FROM (
--     SELECT
--       id, name, specialty, location, services, bio, NULL AS programs, NULL AS description, NULL AS activities, vector_embedding
--     FROM health_specialists
--     UNION ALL
--     SELECT
--       id, name, NULL AS specialty, location, NULL AS services, NULL AS bio, programs, description, NULL AS activities, vector_embedding
--     FROM schools
--     UNION ALL
--     SELECT
--       id, name, NULL AS specialty, location, NULL AS services, NULL AS bio, NULL AS programs, description, activities, vector_embedding
--     FROM outdoor_clubs
--   ) AS combined_data
--   WHERE 1 - (vector_embedding <=> query_embedding) > match_threshold
--   ORDER BY similarity DESC
--   LIMIT match_count;
-- END;
-- $$;
